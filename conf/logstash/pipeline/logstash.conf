input {
  # TCP inputs for real-time logs
  tcp {
    port => 5000
    codec => json
    type => "application_logs"
    mode => "server"
    host => "0.0.0.0"
    tcp_keep_alive => false
  }
  
  # File inputs for all services
  file {
    path => "/var/log/nycbs/streamlit/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "streamlit_logs"
    tags => ["streamlit"]
  }
  
  file {
    path => "/var/log/nycbs/jupyter/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "notebook_logs"
    tags => ["jupyter"]
  }
  
  file {
    path => "/var/log/nycbs/spark/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "spark_logs"
    tags => ["spark"]
  }
  
  file {
    path => "/var/log/nycbs/delta/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "delta_logs"
    tags => ["delta"]
  }
}

filter {
  # Common fields for all logs
  mutate {
    add_field => {
      "environment" => "production"
      "cluster_name" => "nycbs-cluster"
    }
  }

  # Standardize timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    remove_field => [ "timestamp" ]
  }

  # Ensure level field exists and is standardized
  if ![level] {
    mutate {
      add_field => { "level" => "INFO" }
    }
  }
  
  mutate {
    uppercase => [ "level" ]
  }

  # Common numeric fields
  if [duration_ms] or [memory_usage_mb] or [data_size] {
    mutate {
      convert => {
        "duration_ms" => "float"
        "memory_usage_mb" => "float"
        "data_size" => "float"
      }
    }
  }

  # Performance tracking
  if [duration_ms] and [duration_ms] > 1000 {
    mutate {
      add_field => { "[performance][is_slow]" => true }
    }
  }

  # Error handling
  if [level] == "ERROR" {
    mutate {
      add_field => { "error_occurred" => true }
    }
    
    if [error_type] {
      ruby {
        code => '
          severity_patterns = {
            /connection|timeout/ => "high",
            /validation|warning/ => "medium",
            /.*/ => "low"
          }
          
          error_type = event.get("[error_type]").to_s.downcase
          severity = "low"
          
          severity_patterns.each do |pattern, level|
            if error_type =~ pattern
              severity = level
              break
            end
          end
          
          event.set("[error_metrics][severity]", severity)
        '
      }
    }
  }

  # Service-specific processing
  if [type] == "notebook_logs" {
    if ![notebook_name] {
      mutate {
        add_field => { "notebook_name" => "unknown" }
      }
    }
    if ![cell_type] {
      mutate {
        add_field => { "cell_type" => "code" }
      }
    }
  }
  
  if [type] == "spark_logs" {
    if ![operation_type] {
      mutate {
        add_field => { "operation_type" => "unknown" }
      }
    }
  }
  
  if [type] == "delta_logs" {
    if ![table_name] {
      mutate {
        add_field => { "table_name" => "unknown" }
      }
    }
    if ![operation_type] {
      mutate {
        add_field => { "operation_type" => "unknown" }
      }
    }
  }
}

output {
  # Main outputs to Elasticsearch with standardized index names
  if [type] == "streamlit_logs" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nycbs-app-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  else if [type] == "notebook_logs" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nycbs-notebook-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  else if [type] == "spark_logs" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nycbs-spark-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  else if [type] == "delta_logs" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nycbs-delta-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nycbs-other-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Error logs to files
  if [error_occurred] {
    file {
      path => "/var/log/nycbs/%{[type]}/error/%{[type]}_%{+YYYY_MM_dd}.log"
      codec => json_lines
    }
  }

  # Debug output (optional)
  stdout {
    codec => rubydebug
  }
} 